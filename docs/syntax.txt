Syntax
======

The syntax of pylisp, like the syntax of lisps in general,
is braindead-simple::

    1
    1.1
    'a
    "asdf"
    ; This is a comment
    ; BTW, 'a and "a" are completely identical in all ways
    ; They create the same exact parse tree
    #t
    #f ;True and false
    #0 ;None
    
    (+ 1 2) ; -> 3
    (+ '(1 2) '(3 4)) ; -> (1 2 3 4)
    (+ `(1 ,(+ 3 4)) '(1 ,(4 5))) ; -> (1 7 1 ,(4 5))
    ; Note the different quote characters
    
    `(+ ,@(list 1 2 3 4 5 6)) ; -> (+ 1 2 3 4 5 6)
    ; The comma-at splices the result of the expression into the current place
    
    {{1 + 2 * 3 / 4}} ; -> 2
    ; This executes python code
    
    {{{b = 1}}}
    ; This executes statements, but not inline (it returns #0)

    {x: (f x)}
    ; Equivalent to (fn (x) (f x))
    {x y z: (* x y x z)}
    ; Equivalent to (fn (x y z) (* x y x z))
    (((((({:{:{:{:{:{:}}}}}}))))))
    ; Yes, this is legal, and it returns #0.
    ; Never write code like this

For more on the inline Python feature, see :doc:`python`.

There's really nothing more to it. Well... at times, the ``.`` makes its appearance::

    ((fn (a . b) b) 1 2 3 4 5) ; -> (2 3 4 5)

But it's not quite part of the syntax -- it's just a special case in function signitures.

Implementation
--------------
Most of the syntax is normalized to standard s-expressions
during parsing; that is, the output of the parser is pure
s-expression. For example, the output of the parser for
``{x:x}`` is ``(fn (x) x)``.

Deep down, the quote, quasiquote, and comma operators are
implemented as special forms matching the respective
punctuation characters. Thus, one can do::

    (set! "," {x:5})
    ,x ; Yields 5

But you should never, ever, ever redefine comma. Due to
specifics in the implementation, it is impossible to
redefine quote and quasiquote.
